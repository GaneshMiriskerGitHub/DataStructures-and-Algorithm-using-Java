package packagee18_Graphs;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;

import packagee19_Graphs.P3_dfs.Edge;

public class PPP23_SCC_KosarajuAlgo {

	/*
	 * To print all the Strongly Connected components Using Kosaraju Algorithm
	 * Basically in a given graph[] we must print a group of nodes, which are
	 * connected as well as has path to each other link:-
	 * https://www.youtube.com/watch?v=59fUtYYz7ZU
	 */

	/*
	 * Solution:- (doing reverse DFS) First store topological order of all nodes Do
	 * Transpose {so as to reverse the direction of each edge} now apply DFS
	 */

	static class Edge {
		int src;
		int dest;

		public Edge(int src, int dest) {
			this.src = src;
			this.dest = dest;
		}
	}

	public static void createGraph(ArrayList<Edge> graph[]) {
		for (int i = 0; i < graph.length; i++) {
			graph[i] = new ArrayList<Edge>();
		}

		graph[0].add(new Edge(0, 2));
		graph[0].add(new Edge(0, 3));

		graph[1].add(new Edge(1, 0));

		graph[2].add(new Edge(2, 1));

		graph[3].add(new Edge(3, 4));
	}

	public static void topoSort(ArrayList<Edge> graph[], int curr, boolean vis[], Stack<Integer> stack) {

		vis[curr] = true;

		for (int i = 0; i < graph[curr].size(); i++) {
			Edge e = graph[curr].get(i);
			if (!vis[e.dest]) {
				topoSort(graph, e.dest, vis, stack);
			}
		}

		stack.push(curr);

	}

	public static void dfs(ArrayList<Edge> graph[], int curr, boolean[] vis) {

		vis[curr] = true;
		System.out.print(curr + " ");

		for (Edge e : graph[curr]) {
			if (!vis[e.dest]) {
				dfs(graph, e.dest, vis);
			}
		}

	}

	public static void kosarajuAlgo(ArrayList<Edge> graph[], int V) {

		// Step 1 : Find topological sorted order
		boolean[] vis = new boolean[V];
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < graph.length; i++) {
			if (!vis[i]) {
				topoSort(graph, i, vis, stack);
			}
		}

		// Step 2 : Find transpose of the graph
		ArrayList<Edge> transposeGraph[] = new ArrayList[V];
		for (int i = 0; i < graph.length; i++) {
			transposeGraph[i] = new ArrayList<Edge>();
		}

		for (int i = 0; i < V; i++) {
			for (int j = 0; j < graph[i].size(); i++) {
				Edge e = graph[i].get(j);
				transposeGraph[e.dest].add(new Edge(e.dest, e.src)); // this line gurthu pettuko
			}
		}

		// Step 3 : apply dfs
		boolean[] vis1 = new boolean[V];
		while(!stack.isEmpty()) {
			int curr = stack.pop();
			if (!vis1[curr]) {
				dfs(transposeGraph, curr, vis1);
				System.out.println();
			}
		}

	}

	public static void main(String[] args) {

		int V = 5;

		ArrayList<Edge> graph[] = new ArrayList[V];
		createGraph(graph);

		kosarajuAlgo(graph, V);

	}

}
