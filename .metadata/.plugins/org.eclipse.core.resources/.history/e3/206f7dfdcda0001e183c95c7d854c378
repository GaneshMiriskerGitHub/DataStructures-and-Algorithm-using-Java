package Type2_0_1_KnapSack;

import java.util.Arrays;

/*
 * divide the given array in two parts in any order : in such a way that, the difference between 
 * both their sum should be minimum
 */

public class P4_Minimum_SubSet_Sum_Difference { // don't waste time 2 days busted
	
	// Also known as Minimum Partition

	// memoization
	public static int maxValue(int[] val, int[] wt, int i, int W, int[] dp) {
		if (W <= 0)
			return 0;
		if (i == val.length) {
			return 0;
		}

		if (dp[i] != -1) {
			return dp[i];
		}

		int max = 0;
		if (W >= wt[i]) {
			int include = val[i] + maxValue(val, wt, i + 1, W - wt[i],dp);
			int exclude = maxValue(val, wt, i + 1, W, dp);
			max = Math.max(include, exclude);
		} else {
			int exclude = maxValue(val, wt, i + 1, W,dp);
			max = exclude;
		}

		dp[i] = max;

		return dp[i];

	}

	// Tabulation
	public static int findMinDiff(int[] arr) {

		int total = Arrays.stream(arr).sum();

		int target = total / 2;

		int[] dp = new int[arr.length + 1];
		
		Arrays.fill(dp, -1);
		
		maxValue(arr, arr, 0, target, dp);
		
		int s1 = dp[arr.length-1];
		int s2 = total - s1;
		
		return Math.abs(s1 - s2);
		

	}
	
	// Tabulation
		public static boolean subSetTabulation(int[] arr, int target) {
			
			boolean[][] dp = new boolean[arr.length+1][target+1];
			for(int i=0;i<dp.length;i++) {
				dp[i][0] = true;
			}
			
			for(int i=1;i<dp.length;i++) {
				for(int j=1;j<dp[i].length;j++) {
					// include
					if(arr[i-1] <= j) {
						boolean include = dp[i-1][j-arr[i-1]];
						boolean exlude = dp[i-1][j];
						dp[i][j] = include || exlude;
					}else {
						boolean exlude = dp[i-1][j];
						dp[i][j] = exlude;
					}
				}
			}
			
			return dp[arr.length][target];
		}

	public static void main(String[] args) {

		int arr[] = { 3, 1 };

		System.out.println(findMinDiff(arr));

	}

}
