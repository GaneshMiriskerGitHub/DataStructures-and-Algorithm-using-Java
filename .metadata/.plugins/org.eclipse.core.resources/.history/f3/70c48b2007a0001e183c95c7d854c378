package Type2_0_1_KnapSack;

import java.util.Arrays;

public class P1_0_1_Knapsack {

	// Recursion
	public static int maxValue(int[] val, int[] wt, int i, int W) {

		if (i == val.length) {
			return 0;
		}

		int max = 0;
		if (W >= wt[i]) {
			int include = val[i] + maxValue(val, wt, i + 1, W - wt[i]);
			int exclude = maxValue(val, wt, i + 1, W);
			max = Math.max(include, exclude);
		} else {
			int exclude = maxValue(val, wt, i + 1, W);
			max = exclude;
		}

		return max;

	}

	

	public static int knapSack(int W, int wt[], int val[], int n) {
		// your code here
		int[] memo = new int[val.length];
		Arrays.fill(memo, -1);
		return knapSackHelper(W, wt, val, n, memo);

	}

	public static int knapSackHelper(int W, int wt[], int val[], int n, int[] memo) {
		// your code here
		if (W == 0)
			return 0;
		if (n == 0)
			return 0;

		int max = 0;
		if (memo[n - 1] != -1)
			return memo[n - 1];
		if (W >= wt[n - 1]) {
			int include = val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1);
			int exclude = knapSack(W, wt, val, n - 1);
			max = Math.max(include, exclude);
		} else {
			max = knapSack(W, wt, val, n - 1);
		}

		memo[n - 1] = max;

		return memo[n - 1];
	}
	
	public static int knapsackTabulation(int[] val, int[] wt, int W) {
		int[][] dp = new int[val.length+1][W+1];
		
		for(int i=1;i<dp.length;i++) {
			dp[i-1][0] = 0;
		}
		
		for(int i=1;i<dp.length;i++) {
			for(int j=1;j<dp[i].length;j++) {
				if(j >= wt[i-1]) {
					int include  = val[i-1] + dp[i-1][j-wt[i-1]];
					int exclude = dp[i-1][j];
					dp[i][j] = Math.max(include, exclude);
				}else {
					int exclude = dp[i-1][j];
					dp[i][j] = exclude;
				}
			}
		}
		
		return dp[val.length][W];
			
	}

	public static void main(String[] args) {
		int[] val = { 15, 14, 10, 45, 30 };
		int[] wt = { 2, 5, 1, 3, 4 };
		int W = 7;

		System.out.println(maxValue(val, wt, 0, W));

		int[] memo = new int[val.length];
		Arrays.fill(memo, -1);
		System.out.println(maxValue(val, wt, 0, W, memo));
		System.out.println(knapSack(W, wt, val, 5));
		System.out.println(knapsackTabulation(val, wt, W));
		
	}

}
