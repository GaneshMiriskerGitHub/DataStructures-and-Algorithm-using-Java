package packagee18_Graphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class P8_Bipartie_Graph {

	static class Edge {
		int src;
		int dest;

		public Edge(int src, int dest) {
			this.src = src;
			this.dest = dest;
		}
	}

	public static boolean isBipartite(ArrayList<Edge>[] graph) {
		int[] colors = new int[graph.length];
		Arrays.fill(colors, -1); // Initialize colors to -1 (unvisited)

		for (int i = 0; i < graph.length; i++) {
			if (colors[i] == -1) {
				if (!dfs(graph, colors, i, 0)) {
					return false;
				}
			}
		}

		return true;
	}

	public static boolean dfs(ArrayList<Edge>[] graph, int[] colors, int node, int color) {
		colors[node] = color;

		for (Edge edge : graph[node]) {
			if (colors[edge.dest] == color) {
				return false; // If adjacent nodes have the same color, not bipartite
			}
			if (colors[edge.dest] == -1 && !dfs(graph, colors, edge.dest, 1 - color)) {
				return false;
			}
		}

		return true;
	}

	public static void main(String[] args) {
		int V = 5;
		ArrayList<Edge>[] graph = new ArrayList[V];
		for (int i = 0; i < V; i++) {
			graph[i] = new ArrayList<>();
		}

		// Add edges to the graph
		graph[0].add(new Edge(0, 1));
		graph[0].add(new Edge(0, 2));

		graph[1].add(new Edge(1, 0));
		graph[1].add(new Edge(1, 3));

		graph[2].add(new Edge(2, 0));
		graph[2].add(new Edge(2, 4));

		graph[3].add(new Edge(3, 1));
		//graph[3].add(new Edge(3, 4));

		graph[4].add(new Edge(4, 2));
		//graph[4].add(new Edge(4, 3));

		System.out.println(isBipartite(graph)); // Output: false
	}

}
