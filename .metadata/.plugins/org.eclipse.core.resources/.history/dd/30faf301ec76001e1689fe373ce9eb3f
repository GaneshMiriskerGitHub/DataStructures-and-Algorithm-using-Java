package package5_BackTracking;

import java.util.Arrays;

public static class PP13_Shortest_Safe_Path {

	private static int minDistance;

	public static boolean isSafeMark(int[][] matrix, int row, int col) {
		return row >= 0 && row < matrix.length && col >= 0 && col < matrix[row].length;
	}

	public static void markUnsafe(int[][] matrix) {
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
				if (matrix[i][j] == 0) {
					if (isSafeMark(matrix, i, j - 1)) {
						matrix[i][j - 1] = -1;
					}
					if (isSafeMark(matrix, i, j + 1)) {
						matrix[i][j + 1] = -1;
					}
					if (isSafeMark(matrix, i - 1, j)) {
						matrix[i - 1][j] = -1;
					}
					if (isSafeMark(matrix, i + 1, j)) {
						matrix[i + 1][j] = -1;
					}
				}
			}
		}
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
				if (matrix[i][j] == -1) {
					matrix[i][j] = 0;
				}
			}
		}
	}

	public static void printMatrix(int[][] matrix) {
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
				System.out.print(matrix[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void findShortestPath(int[][] matrix) {
		int numRows = matrix.length;
		int numCols = matrix[0].length;
		minDistance = Integer.MAX_VALUE;
		boolean[][] visited = new boolean[numRows][numCols];
		markUnsafe(matrix);
		for (int i = 0; i < matrix.length; i++) {
			if (matrix[i][0] == 1) {
				for (int k = 0; k < visited.length; k++) {
					Arrays.fill(visited[k], false);
				}
				findShortestPathUtil(matrix, visited, i, 0, 0);
			}
		}
	}

	public static boolean isSafe(int[][] matrix, int row, int col) {
		return row >= 0 && row < matrix.length && col >= 0 && col < matrix[0].length && matrix[row][col] == 1;
	}

	public static boolean isValid(int[][] matrix, boolean[][] visited, int row, int col) {
		return !visited[row][col] && matrix[row][col] != 0;
	}

	public static void findShortestPathUtil(int[][] matrix, boolean[][] visited, int row, int col, int dist) {
		if (col == matrix.length - 1) {
			minDistance = Math.min(minDistance, dist);
			return;
		}
		if (dist > minDistance) {
			return;
		}
		visited[row][col] = true;
		int[] dr = { -1, 0, 1, 0 };
		int[] dc = { 0, -1, 0, 1 };
		for (int i = 0; i < 4; i++) {
			int newRow = row + dr[i];
			int newCol = col + dc[i];
			if (isSafe(matrix, newRow, newCol) && isValid(matrix, visited, newRow, newCol)) {
				findShortestPathUtil(matrix, visited, newRow, newCol, dist + 1);
			}
		}
		visited[row][col] = false;
	}

	public static static void main(String[] args) {

		// Input matrix with landmines shown with number 0
		int[][] mat = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 0, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, { 1, 0, 1, 1, 1, 1, 1, 1, 0, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 } };
		// Find shortest path
//		findShortestPath(mat);
//		
//		System.out.println(min_dist);

		findShortestPath(mat);
		findShortestPath
		System.out.println("Minimum distance: " + minDistance);

	}

}
