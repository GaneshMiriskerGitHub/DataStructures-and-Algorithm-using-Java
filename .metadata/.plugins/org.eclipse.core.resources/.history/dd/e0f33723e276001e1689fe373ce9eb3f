package package5_BackTracking;

public class PP13_Shortest_Safe_Path { // Graph // dijkstra's algorithm

	public static boolean isSafeMark(int[][] mat, int r, int c) {
		if (r < 0 || r > mat.length - 1 || c < 0 || c > mat[r].length - 1) {
			return false;
		}

		return true;
	}

	public static void markUnsafe(int[][] mat) {

		// first mark -1
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat[0].length; j++) {
				if (mat[i][j] == 0) {
					if (isSafeMark(mat, i, j - 1)) {
						mat[i][j - 1] = -1;
					}
					if (isSafeMark(mat, i, j + 1)) {
						mat[i][j + 1] = -1;
					}
					if (isSafeMark(mat, i - 1, j)) {
						mat[i - 1][j] = -1;
					}
					if (isSafeMark(mat, i + 1, j)) {
						mat[i + 1][j] = -1;
					}
				}
			}
		}

		// now mark 0
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat[0].length; j++) {
				if (mat[i][j] == -1) {
					mat[i][j] = 0;
				}
			}
		}

	}

	public static void findShortestPath(int[][] mat) {

		int n = mat.length;
		int m = mat[0].length;

		int min_dist = Integer.MAX_VALUE;

		boolean[][] visited = new boolean[n][m];

		markUnsafe(mat);
		
		printMat = 

	}

	public static void main(String[] args) {

		// Input matrix with landmines shown with number 0
		int[][] mat = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 0, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, { 1, 0, 1, 1, 1, 1, 1, 1, 0, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 0, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 } };

		// Find shortest path
		findShortestPath(mat);

	}

}
