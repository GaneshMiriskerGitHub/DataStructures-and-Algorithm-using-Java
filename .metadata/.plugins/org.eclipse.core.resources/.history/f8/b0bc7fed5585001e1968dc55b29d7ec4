package packagee14_BST;

public class Tester {

	static class Node {
		int data;
		Node left;
		Node right;

		public Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

	public static Node delete(Node root, int val) {
		if (val < root.data) {
			root.left = delete(root.left, val);
		} else if (root.data > val) {
			root.right = delete(root.right, val);
		} else {
			//
			if (root.left == null && root.right == null) {
				return null;
			}
			//
			if (root.left == null) {
				return root.right;
			} else if (root.right == null) {
				return root.left;
			}
			//
			Node IS = findInOrderSuccessor(root.right); // finding min value on right side
			root.data = IS.data;
			root.right = delete(root.right, IS.data);

		}

		return root;
	}

	public static Node findInOrderSuccessor(Node root) {
		if (root.left == null) {
			return root;
		}
		return findInOrderSuccessor(root.left);
	}

	static class Info {
		int isBST;
		int size;
		int max;
		int min;

		public Info(int isBST, int size, int max, int min) {
			this.isBST = isBST;
			this.size = size;
			this.max = max;
			this.min = min;
		}
	}

	public static Node largestBST_in_BT(Node root) {
		
		
		
	}

	public static void main(String[] args) {

	}

}
