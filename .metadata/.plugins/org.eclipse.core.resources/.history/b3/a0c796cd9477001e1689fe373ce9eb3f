package package5_BackTracking;

import java.util.ArrayList;
import java.util.HashSet;

public class PP15_Hamilton_Cycle { // Graph

	static class Edge {
		int src;
		int des;

		public Edge(int src, int des) {
			this.src = src;
			this.des = des;
		}
	}

	public static void hamiltonPath(ArrayList<Edge>[] graph, int src, HashSet<Integer> visited, String pathSoFar,
			int OriginalSrc) {

		if (visited.size() == graph.length-1) {
			System.out.println(pathSoFar);
			return;
		}

		visited.add(src);
		for(Edge e : graph[src]) {
			int neibr = e.des;
		}
		visited.remove(src);
	}

	public static void main(String[] args) {

		int N = 4;
		int M = 4;
		int[][] Edges = { { 1, 2 }, { 2, 3 }, { 3, 4 }, { 2, 4 } };

		// Create an ArrayList array to represent the graph
		ArrayList<Edge>[] graph = new ArrayList[Edges.length + 1]; // +1 because vertices are 1-based

		// Initialize ArrayLists for each vertex
		for (int i = 1; i <= Edges.length; i++) {
			graph[i] = new ArrayList<>();
		}

		// Add edges to the graph
		for (int[] edge : Edges) {
			int source = edge[0];
			int destination = edge[1];
			graph[source].add(new Edge(source, destination));
		}

		// Print the graph
		for (int i = 1; i <= Edges.length; i++) {
			System.out.print("Vertex " + i + ": ");
			for (Edge edge : graph[i]) {
				System.out.print("(" + edge.src + " -> " + edge.des + ") ");
			}
			System.out.println();
		}

	}

}
