package package6_LinkedList;

import package6_LinkedList.P2_LinkedList_Cycle.Node;

public class P3_Merge_two_Sorted_LinkedLists {
	
	static class Node {
		int data;
		Node next;
		
		public Node(int data) {
			this.data = data;
			Node next = null;
		}
	}
	
	public static Node head;
	public static Node tail;
	public static int size;
	
	public static void addLast(int data) {
		Node newNode = new Node(data);
		if(head == null) {
			head = tail = newNode;
			size++;
			return;
		}
		tail.next = newNode;
		tail = newNode;
		size++;
	}
	
	public static void printLL(Node head) {
		if(head == null) {
			System.out.println("Linked List is empty");
		}
		Node temp = head;
		while(temp != null) {
			System.out.print(temp.data+" -> ");
			temp = temp.next;
		}
	}

	public static Node mergeLL(Node list1, Node list2) {
		
		Node newHead = new Node(-1);
		
        Node temp = newHead;
        while(list1 != null){
        	temp.next = list1;
        	list1 = list1.next;
        	temp = temp.next;
        }
        
        return newHead.next;
	}
	
	public static void main(String[] args) {
		
		P3_Merge_two_Sorted_LinkedLists list1 = new P3_Merge_two_Sorted_LinkedLists();
		P3_Merge_two_Sorted_LinkedLists list2 = new P3_Merge_two_Sorted_LinkedLists();
		
		list1.addLast(1);
		list1.addLast(2);
		list1.addLast(3);
		list1.addLast(4);
		list1.addLast(4);
		list1.addLast(5);
		
		list2.addLast(1);
		list2.addLast(2);
		list2.addLast(3);
		list2.addLast(4);
		list2.addLast(5);
		
		Node newHead = mergeLL(list1.head, list2.head);
		
		printLL(newHead);
		
	}

}

