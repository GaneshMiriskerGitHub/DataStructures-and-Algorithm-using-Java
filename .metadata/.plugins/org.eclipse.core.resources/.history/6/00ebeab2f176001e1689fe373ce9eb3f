package package5_BackTracking;

import java.util.Arrays;
import java.util.OptionalInt;

public class PP14_Partion_of_K_Equal_SubSets { 
	
	public static boolean partitionKEqualSubSet(int[] nums, int k) {
		
		int sum = Arrays.stream(nums).sum();
		int maxNum = Arrays.stream(nums).max().getAsInt();
		
		if(sum%2!=0) return false;
		
		if(k>nums.length || maxNum > k) return false;
		
		int target = sum/k;
		
		boolean[] vis = new boolean[nums.length];
		
		boolean isPossible = partition(nums, vis, k, target, 0);
		
		return isPossible;
	}
	
	public static boolean partition(int[] arr, boolean[] vis, int k, int target, int idx) {
		
		if(arr[idx] <= target) {
			
		}
		
	}
	

	public static void main(String[] args) {
		
		int[] nums = {4, 3, 2, 3, 5, 2, 1};
        int K = 4;
        boolean isPossible = partitionKEqualSubSet(nums, k)

	}

}
