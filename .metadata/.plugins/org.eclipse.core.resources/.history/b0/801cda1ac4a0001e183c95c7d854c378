package Type2_0_1_KnapSack;

import java.util.Arrays;

public class Tester {

	static int max(int a, int b) {
		return (a > b) ? a : b;
	}

	// Returns the value of maximum profit
	static int knapSackRec(int W, int wt[], int val[], int n, int[][] dp) {

		// Base condition
		if (n == 0 || W == 0)
			return 0;

		if (dp[n][W] != -1)
			return dp[n][W];

		if (wt[n - 1] > W)

			// Store the value of function call
			// stack in table before return
			return dp[n][W] = knapSackRec(W, wt, val, n - 1, dp);

		else

			// Return value of table after storing
			return dp[n][W] = max((val[n - 1] + knapSackRec(W - wt[n - 1], wt, val, n - 1, dp)),
					knapSackRec(W, wt, val, n - 1, dp));
	}

	static int knapSack(int W, int wt[], int val[], int n) {

		// Declare the table dynamically
		int dp[][] = new int[n + 1][W + 1];

		// Loop to initially filled the
		// table with -1
		for (int i = 0; i < n + 1; i++)
			for (int j = 0; j < W + 1; j++)
				dp[i][j] = -1;

		return knapSackRec(W, wt, val, n, dp);
	}

	public static int maxValRecursion(int[] val, int[] wt, int W, int n) {

		if (n <= 0 || W == 0) {
			return 0;
		}

		if (wt[n - 1] <= W) {
			int include = val[n - 1] + maxValRecursion(val, wt, W - wt[n - 1], n - 1);
			int exclude = maxValRecursion(val, wt, W, n - 1);
			return Math.max(include, exclude);
		} else {
			int exclude = maxValRecursion(val, wt, W, n - 1);
			return exclude;
		}

	}

	public static int maxValMemoizationUtil(int[] val, int[] wt, int W, int n, int[][] memo) {

		if (n <= 0 || W == 0) {
			return 0;
		}
		
		if(memo[n-1][W-1] != -1) {
			return memo[n][W];
		}

		if (wt[n - 1] <= W) {
			int include = val[n - 1] + maxValRecursion(val, wt, W - wt[n - 1], n - 1);
			int exclude = maxValRecursion(val, wt, W, n - 1);
			memo[n][W] =  Math.max(include, exclude);
			return memo[n][W];
		} else {
			int exclude = maxValRecursion(val, wt, W, n - 1);
			memo[n][W] = exclude;
			return memo[n][W];
		}

	}
	
	

	public static void main(String[] args) {

		int[] val = { 15, 14, 10, 45, 30 };
		int[] wt = { 2, 5, 1, 3, 4 };
		int W = 7;

		int n = val.length;

		System.out.println(maxValRecursion(val, wt, W, n));

		int[][] memo = new int[val.length][W];
		for(int i=0;i<memo.length;i++) {
			Arrays.fill(memo[i], -1);
		}
		System.out.println(maxValMemoizationUtil(val, wt, W, n, memo));
		
		//System.out.println(maxValTabulation(val, wt, W));

	}
}
