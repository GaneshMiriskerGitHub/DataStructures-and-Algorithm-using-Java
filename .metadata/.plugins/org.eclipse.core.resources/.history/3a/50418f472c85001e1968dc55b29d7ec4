package packagee14_BinaryTrees;

import java.util.ArrayList;
import java.util.HashMap;

public class A4_Find_All_Duplicate_Subtrees {

	static class Node {
		int data;
		Node left;
		Node right;

		public Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

	public static void printAllNodes(Node root) {

		if (root == null) {
			return;
		}

		System.out.print(root.data + " ");
		printAllNodes(root.left);
		printAllNodes(root.right);

	}

	static HashMap<String, Integer> m;

	public static String inOrder(Node root, ArrayList<Node> list) {

		if (root == null) {
			return "";
		}

		String str = "(";

		str = str + inOrder(root.left, list)+",";
		str = str + Integer.toString(root.data)+",";
		str = str + inOrder(root.right, list);

		str += ")";

		if (m.containsKey(str) && m.get(str) == 1) {
			list.add(root);
//			System.out.print(root.data + " ");
		}

		if (!m.containsKey(str)) {
			m.put(str, 1);
		} else {
			m.put(str, m.get(str) + 1);
		}

		return str;
	}

	public static void printAllDuplicatesInTree(Node root) {
		m = new HashMap<>();
		ArrayList<Node> list = new ArrayList<>();
		inOrder(root, list);
		
		for(Node ele: list) {
			System.out.println(ele.left);
			System.out.println(ele.data);
			System.out.println(ele.right.data);
		}
	}

	public static void main(String[] args) {

		Node root = null;
		root = new Node(1);
		root.left = new Node(4);
		root.right = new Node(3);
		root.left.left = new Node(3);
		root.right.left = new Node(4);
		root.right.left.left = new Node(3);
		root.right.right = new Node(3);
		printAllDuplicatesInTree(root);

	}

}
