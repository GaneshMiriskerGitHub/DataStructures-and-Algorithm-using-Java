package Type2_KnapSack;

import java.util.Arrays;

public class P1_0_1_Knapsack {

	// Recursion
	public static int maxValue(int[] val, int[] wt, int i, int W) {

		if (i == val.length) {
			return 0;
		}

		int max = 0;
		if (W >= wt[i]) {
			int include = val[i] + maxValue(val, wt, i + 1, W - wt[i]);
			int exclude = maxValue(val, wt, i + 1, W);
			max = Math.max(include, exclude);
		} else {
			int exclude = maxValue(val, wt, i + 1, W);
			max = exclude;
		}

		return max;

	}

	// memoization
	public static int maxValue(int[] val, int[] wt, int i, int W, int[] dp) {

		if (i == val.length) {
			return 0;
		}

		if(dp[i] != -1) {
			return dp[i];
		}
		
		int max = 0;
		if (W >= wt[i]) {
			int include = val[i] + maxValue(val, wt, i + 1, W - wt[i]);
			int exclude = maxValue(val, wt, i + 1, W);
			max = Math.max(include, exclude);
		} else {
			int exclude = maxValue(val, wt, i + 1, W);
			max = exclude;
		}
		
		dp[i] = max;

		return dp[i];

	}
	
	public static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here
         int[] memo = new int[val.length];
		 Arrays.fill(memo, -1);
         return maxValue(val, wt, 0, W, memo);
    } 
    
    public static int maxValue1(int[] val, int[] wt, int i, int W, int[] dp) {

		if (i == val.length) {
			return 0;
		}

		if(dp[i] != -1) {
			return dp[i];
		}
		
		int max = 0;
		if (W >= wt[i]) {
			int include = val[i] + maxValue(val, wt, i + 1, W - wt[i]);
			int exclude = maxValue(val, wt, i + 1, W);
			max = Math.max(include, exclude);
		} else {
			int exclude = maxValue(val, wt, i + 1, W);
			max = exclude;
		}
		
		dp[i] = max;

		return dp[i];

	}

	public static void main(String[] args) {

		int[] val = { 15, 14, 10, 45, 30 };
		int[] wt = { 2, 5, 1, 3, 4 };
		int W = 7;

		System.out.println(maxValue(val, wt, 0, W));

		int[] memo = new int[val.length];
		Arrays.fill(memo, -1);
		System.out.println(maxValue(val, wt, 0, W, memo));
		
		
		System.out.println(knapSack(W, wt, val, 4));

	}

}
