package package5_BackTracking;

public class P4_Find_longest_Path {
	
	class Pair {
		boolean found;
		int val;
		
		public Pair(boolean found, int val) {
			this.found = found;
			this.val = val;
		}
	}
	
	public static void findLongestPath(int[][] mat, int i, int j, int n, int m) { // https://www.geeksforgeeks.org/longest-possible-route-in-a-matrix-with-hurdles/
		int R = mat.length;
		int C = mat[0].length;
		boolean[][] visited = new boolean[R][C];
		Pair p = findLongestPathUtil(mat, i, j, n, m,R, C, visited);
	}
	
	public static Pair findLongestPathUtil(int[][] mat, int i, int j, int n, int m,int R, int C, boolean[][] visited) {
		
		if(i == n && j == m) {
			return new Pair(true, 0);
		}
		
		// not valid then return false;
		if(i<0 || i>=R || j<0 || j>=C || visited[i][j] == true || mat[i][j] == 0 ) {
			return new Pair(false, Integer.MAX_VALUE);
		}
		
		visited[i][j] = true;
		
		int res = Integer.MIN_VALUE;
		
		// left approach
		Pair p1 = findLongestPathUtil(mat, i, j-1, n, m, R, C, visited);
		
		if(p1.val > res) {
			res = p1.val;
		}
		
	}

	public static void main(String[] args) {
		

	    // input matrix with hurdles shown with number 0
	    int mat[][] = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
	                   { 1, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
	                   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };
	 
	    // find longest path with source (0, 0) and
	    // destination (1, 7)
	    findLongestPath(mat, 0, 0, 1, 7);

	}

}
