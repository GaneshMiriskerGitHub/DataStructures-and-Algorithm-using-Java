package packagee18_Graphs;

import java.util.ArrayList;
import java.util.Stack;

public class PP10_Topological_Sort { // learning link :- https://www.youtube.com/watch?v=Zbbe9FYVnM4
										// solved here:-
										// https://practice.geeksforgeeks.org/problems/topological-sort/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

	// Function to return list containing vertices in Topological order.
	static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
		// add your code here
		boolean[] vis = new boolean[V];
		Stack<Integer> stack = new Stack<>();

		for (int i = 0; i < V; i++) {
			if (vis[i] == false) {
				dfs(i, adj, vis, stack);
			}
		}

		int[] result = new int[V];
		int i = 0;
		while (!stack.isEmpty()) {
			result[i] = stack.pop();
			i++;
		}
		return result;
	}

	public static void dfs(int currVertx, ArrayList<ArrayList<Integer>> adj, boolean[] vis, Stack<Integer> stack) {

		vis[currVertx] = true;

		for (Integer neighbour : adj.get(currVertx)) {

			if (vis[neighbour] == false) {
				dfs(neighbour, adj, vis, stack);
			}

		}

		stack.push(currVertx);

	}
	
	
	
	// ********* Topological sort : kahn's algorithm *********************

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
