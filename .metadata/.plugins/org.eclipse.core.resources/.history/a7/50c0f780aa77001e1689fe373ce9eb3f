package package5_BackTracking;

import java.util.ArrayList;
import java.util.HashSet;

public class PP15_Hamilton_Cycle { // Graph

	static class Edge {
		int src;
		int des;

		public Edge(int src, int des) {
			this.src = src;
			this.des = des;
		}
	}

	public static void check(int N, int M, ArrayList<ArrayList<Integer>> Edges) {
		// code here
		ArrayList<Edge>[] edges = new ArrayList[N];

        // Initialize the ArrayLists in the array
        for (int i = 0; i < N; i++) {
            edges[i] = new ArrayList<>();
        }

        // Populate the edges array from the adjacency list
        for (int i = 0; i < N; i++) {
            for (int j : Edges.get(i)) {
                edges[i].add(new Edge(i, j));
            }
        }
		
		String psf = "1";
		
		hamiltonPath(edges, 1, new HashSet<>(), 1 + psf, 1);
		
		System.out.println(psf);
		
		
		
	}

	public static void hamiltonPath(ArrayList<Edge>[] graph, int src, HashSet<Integer> visited, String psf,
			int OriginalSrc) {

		if (visited.size() == graph.length - 1) {
			System.out.println(psf);
			boolean closingEdgeFound = false;
			for(Edge e : graph[src]) {
				if(e.des == OriginalSrc) {
					closingEdgeFound = true;
					break;
				}
			}
			
			if(closingEdgeFound) {
				System.out.println("*");
			}else {
				System.out.println(".");
			}
			
			return;
		}

		visited.add(src);
		for (Edge e : graph[src]) {
			int neibr = e.des;
			if (visited.contains(neibr) == false) {
				hamiltonPath(graph, neibr, visited, psf + neibr, OriginalSrc);
			}
		}
		visited.remove(src);
	}

	public static void main(String[] args) {

		int N = 4;
		int M = 4;
		int[][] Edges = { { 1, 2 }, { 2, 3 }, { 3, 4 }, { 2, 4 } };

		// Create an ArrayList array to represent the graph
		ArrayList<Edge>[] graph = new ArrayList[Edges.length + 1]; // +1 because vertices are 1-based
		
		

		

	}

}
