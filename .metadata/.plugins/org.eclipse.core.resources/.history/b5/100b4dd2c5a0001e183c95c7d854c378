package Type2_0_1_KnapSack;

import java.util.Arrays;

public class P1_0_1_Knapsack {

	
	// Recursion
	public static int maxValRecursion(int[] val, int[] wt, int W, int n) {

		if (n <= 0 || W == 0) {
			return 0;
		}

		if (wt[n - 1] <= W) {
			int include = val[n - 1] + maxValRecursion(val, wt, W - wt[n - 1], n - 1);
			int exclude = maxValRecursion(val, wt, W, n - 1);
			return Math.max(include, exclude);
		} else {
			int exclude = maxValRecursion(val, wt, W, n - 1);
			return exclude;
		}

	}

	
	// Memoization
	public static int maxValMemoizationUtil(int[] val, int[] wt, int W, int n, int[][] memo) {

		if (n <= 0 || W == 0) {
			return 0;
		}

		if (memo[n][W] != -1) {
			return memo[n][W];
		}

		if (wt[n - 1] <= W) {
			int include = val[n - 1] + maxValMemoizationUtil(val, wt, W - wt[n - 1], n - 1, memo);
			int exclude = maxValMemoizationUtil(val, wt, W, n - 1, memo);
			memo[n][W] = Math.max(include, exclude);
			return memo[n][W];
		} else {
			int exclude = maxValMemoizationUtil(val, wt, W, n - 1, memo);
			memo[n][W] = exclude;
			return memo[n][W];
		}

	}
	
	
	// Tabulation
	public static int maxValTabulation(int[] val , int[] wt, int W) {
		
		int[][] dp = new int[val.length+1][W+1];
		
		for(int i=1;i<dp.length;i++) {
			for(int j=1;j<dp[i].length;j++) {
				
				if(wt[i-1] <= j) {
					int include = val[i-1] + dp[i-1][j-wt[i-1]];
					int exclude = dp[i-1][j];
				}
				
			}
		}
		
	}

	public static void main(String[] args) {

		int[] val = { 15, 14, 10, 45, 30 };
		int[] wt = { 2, 5, 1, 3, 4 };
		int W = 7;

		int n = val.length;

		System.out.println(maxValRecursion(val, wt, W, n));

		int[][] memo = new int[val.length+1][W+1];
		for(int i=0;i<memo.length;i++) {
			Arrays.fill(memo[i], -1);
		}
		System.out.println(maxValMemoizationUtil(val, wt, W, n, memo));
		
		System.out.println(maxValTabulation(val, wt, W));
		
	}

}
