package package5_BackTracking;

import java.util.ArrayList;
import java.util.HashSet;

public class PP15_Hamilton_Cycle { // Graph

	public static void hamiltonPath(ArrayList<ArrayList<Integer>> adjList, int src, HashSet<Integer> visited,
			String pathSoFar, int originalSrc) {
		if (visited.size() == adjList.size()) {
			System.out.println(pathSoFar);
			return;
		}

		visited.add(src);
		for (int neighbor : adjList.get(src)) {
			if (!visited.contains(neighbor)) {
				hamiltonPath(adjList, neighbor, visited, pathSoFar + neighbor, originalSrc);
			}
		}
		visited.remove(src);
	}

	public static void main(String[] args) {
        int N = 4;
        int M = 4;
        int[][] Edges = { {1, 2}, {2, 3}, {3, 4}, {2, 4} };

        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            adjList.add(new ArrayList<>());
        }

        for (int[] edge : Edges) {
            int u = edge[0];
            int v = edge[1];
            adjList.get(u).add(v);
            adjList.get(v).add(u); // Add this line for an undirected graph
        }

        int startVertex = 1; // Change this if you want to start from a different vertex
        hamiltonPath(adjList, startVertex, new HashSet<>(), String.valueOf(startVertex), startVertex);
}
