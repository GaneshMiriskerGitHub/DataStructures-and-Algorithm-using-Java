package package5_BackTracking;

public class Tester {

	public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int n = scanner.nextInt();

        System.out.print("Enter the adjacency matrix: ");
        int[][] adjacencyMatrix = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                adjacencyMatrix[i][j] = scanner.nextInt();
            }
        }

        System.out.print("Enter the source vertex: ");
        int sourceVertex = scanner.nextInt();

        System.out.print("Enter the destination vertex: ");
        int destinationVertex = scanner.nextInt();

        List<Integer> hamiltonianPath = findHamiltonianPath(adjacencyMatrix, sourceVertex, destinationVertex);

        if (hamiltonianPath == null) {
            System.out.println("No Hamiltonian path exists.");
        } else {
            System.out.println("The Hamiltonian path is: ");
            for (int vertex : hamiltonianPath) {
                System.out.print(vertex + " ");
            }
            System.out.println();
        }
    }

    public static List<Integer> findHamiltonianPath(int[][] adjacencyMatrix, int sourceVertex, int destinationVertex) {
        List<Integer> hamiltonianPath = new ArrayList<>();
        hamiltonianPath.add(sourceVertex);

        boolean[] visited = new boolean[adjacencyMatrix.length];
        visited[sourceVertex] = true;

        while (hamiltonianPath.size() < adjacencyMatrix.length && !visited[destinationVertex]) {
            for (int neighbor : adjacencyMatrix[hamiltonianPath.get(hamiltonianPath.size() - 1)]) {
                if (!visited[neighbor]) {
                    hamiltonianPath.add(neighbor);
                    visited[neighbor] = true;
                    break;
                }
            }

            if (hamiltonianPath.get(hamiltonianPath.size() - 1) != destinationVertex) {
                hamiltonPath.remove(hamiltonianPath.size() - 1);
            }
        }

        if (hamiltonianPath.size() < adjacencyMatrix.length) {
            return null;
        } else {
            return hamiltonianPath;
        }
    }

}
