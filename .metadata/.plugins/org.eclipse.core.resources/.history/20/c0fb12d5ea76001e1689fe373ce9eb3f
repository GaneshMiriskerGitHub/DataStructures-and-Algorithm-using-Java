package package5_BackTracking;

import java.util.Arrays;

public class PP13_Shortest_Safe_Path { // Graph // dijkstra's algorithm
	
	static int min_dist;

	public static boolean isSafeMark(int[][] mat, int r, int c) {
		if (r < 0 || r > mat.length - 1 || c < 0 || c > mat[r].length - 1) {
			return false;
		}

		return true;
	}

	public static void markUnsafe(int[][] mat) {

		// first mark -1
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat[0].length; j++) {
				if (mat[i][j] == 0) {
					if (isSafeMark(mat, i, j - 1)) {
						mat[i][j - 1] = -1;
					}
					if (isSafeMark(mat, i, j + 1)) {
						mat[i][j + 1] = -1;
					}
					if (isSafeMark(mat, i - 1, j)) {
						mat[i - 1][j] = -1;
					}
					if (isSafeMark(mat, i + 1, j)) {
						mat[i + 1][j] = -1;
					}
				}
			}
		}

		// now mark 0
		for (int i = 0; i < mat.length; i++) {
			for (int j = 0; j < mat[0].length; j++) {
				if (mat[i][j] == -1) {
					mat[i][j] = 0;
				}
			}
		}

	}
	
	public static void printMatrix(int[][] matrix) {
		for(int i=0;i<matrix.length;i++) {
			for(int j=0;j<matrix[0].length;j++) {
				System.out.print(matrix[i][j]+" ");
			}
			System.out.println();
		}
	}

	public static void findShortestPath(int[][] mat) {

		int n = mat.length;
		int m = mat[0].length;

		min_dist = Integer.MAX_VALUE;

		boolean[][] visited = new boolean[n][m];

		markUnsafe(mat);
		
		for(int i=0;i<mat.length;i++) {   // every row in 0th column
			
			if(mat[i][0] == 1) {
				
				for(int k=0;k<visited.length;k++) {
					Arrays.fill(visited[k], false);
				}
				
				findShortestPathUtil(mat, visited, i, 0, 0);
				
			}
			
		}
		
		

	}
	
	public static boolean isSafe(int[][] mat, int row, int col ) {
		if(row>=0 && row<=mat.length-1 && col>=0 && col<=mat.length-1 && mat[row][col] == 1) {
			return true;
		}
		return false;
	}
	
	public static boolean isValid(int[][] mat, boolean[][] visited, int row, int col) {
		if(visited[row][col] || mat[row][col] == 0) {
			return false;
		}
		
		return true;
	}
	
	public static void findShortestPathUtil(int[][] mat, boolean[][] visited, int row, int col, int dist) {
		
		if(col == mat.length-1) {
			min_dist = Math.min(min_dist, dist);
		}
		
		visited[row][col] = true;
		
		if(isSafe(mat, row-1, col+0) && isValid(mat, visited, row-1, col+0)) {
			findShortestPathUtil(mat, visited, row-1, col+0, dist+1);
		}
		if(isSafe(mat, row+0, col-1) && isValid(mat, visited, row+0, col-1)) {
			findShortestPathUtil(mat, visited, row+0, col-1, dist+1);
		}
		if(isSafe(mat, row+1, col+0) && isValid(mat, visited, row+1, col+0)) {
			findShortestPathUtil(mat, visited, row+1, col+0, dist+1);
		}
		if(isSafe(mat, row+0, col+1) && isValid(mat, visited, row+0, col+1)) {
			findShortestPathUtil(mat, visited, row+0, col+1, dist+1);
		}
		
		visited[row][col] = false;
		
		
	}

	public static void main(String[] args) {

		// Input matrix with landmines shown with number 0
		int[][] mat = { 
		        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
		        { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
		        { 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 }, 
		        { 1, 1, 1, 1, 0, 1, 1, 1, 1, 1 }, 
		        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		        { 1, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, 
		        { 1, 0, 1, 1, 1, 1, 1, 1, 0, 1 }, 
		        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 
		        { 0, 1, 1, 1, 1, 0, 1, 1, 1, 1 }, 
		        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
		        { 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 } };
		// Find shortest path
		findShortestPath(mat);

	}

}
