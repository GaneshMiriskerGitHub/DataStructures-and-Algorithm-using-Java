package Type2_0_1_KnapSack;

import java.util.Arrays;

/*
 * is there a subset exists which has the 10
 */

public class P2_SubSet_Sum { // https://www.youtube.com/watch?v=dJmyfFC3-3A

	public static boolean subSetRecusrion(int[] arr, int target, int n) {

		if (target == 0) {
			return true;
		}
		if (target < 0) {
			return false;
		}
		if (n == 0) { // because below we are saying n-1 so 0-1 won't pass below
			return false;
		}

		if (arr[n - 1] <= target) {
			boolean include = subSetRecusrion(arr, target - arr[n - 1], n - 1);
			boolean exclude = subSetRecusrion(arr, target, n - 1);
			return include || exclude;
		} else {
			boolean exclude = subSetRecusrion(arr, target, n - 1);
			return exclude;
		}

	}

	public static boolean subSetMemoization(int[] arr, int target, int n, boolean[][] memo) {

		if (target == 0) {
			return true;
		}
		if (target < 0) {
			return false;
		}
		if (n == 0) { // because below we are saying n-1 so 0-1 won't pass below
			return false;
		}
		
		if(memo[n][target] != false) {
			return memo[n][target];
		}

		if (arr[n - 1] <= target) {
			boolean include = subSetRecusrion(arr, target - arr[n - 1], n - 1);
			boolean exclude = subSetRecusrion(arr, target, n - 1);
			memo[n][target] =  include || exclude;
			return memo[n][target];
		} else {
			boolean exclude = subSetRecusrion(arr, target, n - 1);
			memo[n][target] = exclude;
			return memo[n][target];
		}

	}

	public static void main(String[] args) {

		int[] arr = { 4, 2, 7, 1, 3 };
		int target = 10;

		System.out.println(subSetRecusrion(arr, target, arr.length));

		boolean[][] memo = new boolean[arr.length + 1][target + 1];
		System.out.println(subSetMemoization(arr, target, arr.length, memo));

	}

}
