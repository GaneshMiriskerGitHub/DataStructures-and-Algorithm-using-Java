package package5_BackTracking;

public class Tester {
	
	public static boolean isSafe(int[][] grid, int r, int c) {
	    return r >= 0 && r < grid.length && c >= 0 && c < grid[0].length && grid[r][c] == 1;
	}

	public static boolean findLongestPathUtil(int[][] grid, int r, int c, int n, int m, int count, boolean[][] visited) {
	    if (r == n && c == m) {
	        System.out.println(count);
	        return true;
	    }
	    
	    if (isSafe(grid, r, c) && !visited[r][c]) {
	        visited[r][c] = true;
	        // Up, Down, Right, Left
	        int[] dr = {-1, 1, 0, 0};
	        int[] dc = {0, 0, 1, -1};
	        for (int i = 0; i < 4; i++) {
	            if (findLongestPathUtil(grid, r + dr[i], c + dc[i], n, m, count + 1, visited)) {
	                return true;
	            }
	        }
	        visited[r][c] = false;
	        return false;
	    } else {
	        return false;
	    }
	}

	public static void main(String[] args) {

		int mat[][] = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };

		boolean[][] visited = new boolean[mat.length][mat[0].length];
		// find longest path with source (0, 0) and
		// destination (1, 7)
		findLongestPathUtil(mat, 0, 0, 1, 7, 1, visited);

	}

}
