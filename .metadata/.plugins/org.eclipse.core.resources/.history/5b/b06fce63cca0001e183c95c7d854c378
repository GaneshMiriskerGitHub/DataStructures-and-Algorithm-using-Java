package Type2_0_1_KnapSack;

import java.util.Arrays;

/*
 * is there a subset exists which has the 10
 */

public class P2_SubSet_Sum { // https://www.youtube.com/watch?v=dJmyfFC3-3A

	
	// Recursion
	public static boolean subSetRecusrion(int[] arr, int target, int n) {

		if (target == 0) {
			return true;
		}
		if (target < 0) {
			return false;
		}
		if (n == 0) { // because below we are saying n-1 so 0-1 won't pass below
			return false;
		}

		if (arr[n - 1] <= target) {
			boolean include = subSetRecusrion(arr, target - arr[n - 1], n - 1);
			boolean exclude = subSetRecusrion(arr, target, n - 1);
			return include || exclude;
		} else {
			boolean exclude = subSetRecusrion(arr, target, n - 1);
			return exclude;
		}

	}

	
	// Memoization : time limit exceeded
	public static boolean subSetMemoization(int[] arr, int target, int n, boolean[][] memo) {

		if (target == 0) {
			return true;
		}
		if (target < 0) {
			return false;
		}
		if (n == 0) { // because below we are saying n-1 so 0-1 won't pass below
			return false;
		}
		
		if(memo[n][target] != false) {
			return memo[n][target];
		}

		
		// include
		if (arr[n - 1] <= target && subSetMemoization(arr, target - arr[n - 1], n - 1, memo) == true) {
			boolean include = subSetMemoization(arr, target - arr[n - 1], n - 1, memo);
			memo[n][target] = true;
		// exclude
		} else if(subSetMemoization(arr, target, n - 1, memo) == true) {
			memo[n][target] = true;
		}

		return memo[n][target];
		
	}
	
	
	public static boolean subSetTabulation(int[] arr, int target) {
		
		boolean[][] dp = new boolean[arr.length+1][target+1];
		for(int i=0;i<dp.length;i++) {
			dp[i][0] = true;
		}
		
		for(int i=1;i<dp.length;i++) {
			for(int j=1;j<dp[i].length;j++) {
				// include
				if(arr[i-1] <= j) {
					boolean include = dp[i-1][j-arr[i-1]];
					boolean exlude = dp[i-1][j];
					dp[i][j] = include || exlude;
				}else {
					boolean exlude = dp[i-1][j];
					dp[i][j] = exlude;
				}
			}
		}
		
		return dp[arr.length][target];
	}

	public static void main(String[] args) {

		int[] arr = { 4, 2, 7, 1, 3 };
		int target = 10;

		System.out.println(subSetRecusrion(arr, target, arr.length));

		boolean[][] memo = new boolean[arr.length + 1][target + 1];
		System.out.println(subSetMemoization(arr, target, arr.length, memo));
		
		System.out.println(subSetTabulation(arr, target));

	}

}
