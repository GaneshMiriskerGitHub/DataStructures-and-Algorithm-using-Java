import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class P8_Bipartie_Graph {
    
    static class Edge {
        int src;
        int dest;

        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }
    
    public static boolean isBipartite(ArrayList<Edge>[] graph) {
        int[] colors = new int[graph.length];
        Arrays.fill(colors, -1);
        
        for (int i = 0; i < graph.length; i++) {
            if (colors[i] == -1) {
                if (!isBipartiteUtil(graph, i, colors)) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    private static boolean isBipartiteUtil(ArrayList<Edge>[] graph, int start, int[] colors) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        colors[start] = 0; // Color the starting vertex
        
        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            
            for (Edge e : graph[currentVertex]) {
                int neighbor = e.dest;
                
                if (colors[neighbor] == -1) {
                    colors[neighbor] = 1 - colors[currentVertex]; // Assign opposite color
                    queue.add(neighbor);
                } else if (colors[neighbor] == colors[currentVertex]) {
                    return false; // Neighbor has the same color
                }
            }
        }
        
        return true;
    }

    public static void main(String[] args) {
        int V = 5;
        
        ArrayList<Edge>[] graph = new ArrayList[V];
        
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));
        
        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 3));
        
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 4));
        
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 4));
        
        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        
        System.out.println(isBipartite(graph));
    }
}
