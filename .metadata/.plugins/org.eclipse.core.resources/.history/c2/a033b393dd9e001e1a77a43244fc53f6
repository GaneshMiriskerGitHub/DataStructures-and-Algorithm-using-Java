package Type2_0_1_KnapSack;

import java.util.Arrays;

/*
 * divide the given array in two parts in any order : in such a way that, the difference between 
 * both their sum should be minimum
 */

public class P4_Minimum_SubSet_Sum_Difference { // don't waste time 2 days busted

	// Tabulation
	public static boolean subSetSumTabulation(int[] nums, int target) {

		boolean[][] dp = new boolean[nums.length][target + 1];

		for (int i = 0; i < nums.length; i++) {
			dp[i][0] = true;
		}
		for (int i = 0; i < target + 1; i++) {
			if (nums[0] == i) {
				dp[0][i] = true;
			}
		}

		for (int i = 1; i < nums.length; i++) {
			for (int j = 1; j < target + 1; j++) {
				if (nums[i] <= j) { // if current element is greater than the target
					int currTarget = j;
					int currEle = nums[i];
					boolean include = dp[i - 1][currTarget - currEle]; // after including the element is it possible
																		// previosuly ?
					boolean exclude = dp[i - 1][j]; // if excluded then was the same target achived previously ?
					dp[i][j] = include || exclude;
				} else {
					boolean exclude = dp[i - 1][j];
					dp[i][j] = exclude;
				}
			}
		}

		return dp[nums.length - 1][target];

	}

	public static int findMinDiff(int[] arr) {

		int n = arr.length / 2;

		int sum = Arrays.stream(arr).sum();

		boolean[][] dp = new boolean[n + 1][sum + 1];

	}

	public static void main(String[] args) {

		int arr[] = { 3, 1 };

		System.out.println(findMinDiff(arr));

	}

}
