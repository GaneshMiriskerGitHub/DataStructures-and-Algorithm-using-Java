package Type6_Matrix_Chain_Multiplication;

import java.util.Arrays;

public class Tester {

	public static int minCost(int[] arr) {
		int i = 1;
		int j = arr.length - 1;
		return minCostHelper(arr, i, j);
	}

	public static int minCostHelper(int[] arr, int i, int j) {

		if (i == j)
			return 0;

		int minCost = Integer.MAX_VALUE;
		for (int k = i; k <= j - 1; k++) { // k defines no.of set where for 4 elements 3 set possible,
											// for 3 elements 2 set possible,
											// for 2 elements 1 set possible,
											// for n elements n-1 set possible,
											// i.e., why loop runs till j-1 even though when we sent n-1 initially
			int cost1 = minCostHelper(arr, i, k);
			int cost2 = minCostHelper(arr, k + 1, j);
			int cost3 = arr[i - 1] * arr[k] * arr[j];
			int finalCost = cost1 + cost2 + cost3;
			minCost = Math.min(minCost, finalCost);
		}

		return minCost;

	}

	public static int minCostMemo(int[] arr, int i, int j, int[][] memo) {

		if (i == j)
			return 0;
		
		if(memo[i][j] != -1) {
			return memo[i][j];
		}

		int minCost = Integer.MAX_VALUE;
		for (int k = i; k <= j - 1; k++) {
			int cost1 = minCostMemo(arr, i, k, memo);
			int cost2 = minCostMemo(arr, k + 1, j, memo);
			int cost3 = arr[i - 1] * arr[k] * arr[j];
			int finalCost = cost1 + cost2 + cost3;
			minCost = Math.min(minCost, finalCost);
		}
		
		memo[i][j] = minCost;

		return minCost;

	}
	
	public static int mcmTab(int[] arr) {
		
		int[][] dp = new int[arr.length][arr.length];
		
		for(int i=0;i<dp.length;i++) {
			Arrays.fill(dp[i], -1);
		}
		
		for(int i=0;i<dp.length;i++) {
			dp[i][i] = 0;
		}
		
		for(int i=0;i<dp[0].length;i++) {
			dp[0][i] = 0;
		}
		
		int n = arr.length;
		for(int len=2;len<=arr.length-1;len++) {
			
			for(int row=1;row<=n-len;row++) {
				int col = row+len-1;
				int minCost = Integer.MAX_VALUE;
				for(int k=row;k<col;k++) {
					int cost1 = dp[row][k];
					int cost2 = dp[k+1][col];
					int cost3 = arr[row-1]*arr[k]*arr[col];
					int finalCost = cost1+cost2+cost3;
					minCost = Math.min(minCost, finalCost);
				}
				dp[row][col] = minCost;
			}
			
		}
		
		return dp[1][arr.length-1];
		
	}

	public static void main(String[] args) {

		int[] arr = { 1, 2, 3, 4, 3 };

		System.out.println(minCost(arr));

		int[][] memo = new int[arr.length][arr.length];
		for (int i = 0; i < memo.length; i++) {
			Arrays.fill(memo[i], -1);
		}
		System.out.println(minCostMemo(arr, 1, arr.length - 1, memo));
//
		System.out.println(mcmTab(arr));

	}

}
