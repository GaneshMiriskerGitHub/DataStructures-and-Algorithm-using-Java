package Type2_0_1_KnapSack;

import java.util.Arrays;

public class Tester {

	// Tabulation for Subset Sum
	public static boolean[][] subSetSumTabulation(int[] nums, int target) {
		boolean[][] dp = new boolean[nums.length][target + 1];

		for (int i = 0; i < nums.length; i++) {
			dp[i][0] = true;
		}

		for (int i = 0; i <= target; i++) {
			if (nums[0] == i) {
				dp[0][i] = true;
			}
		}

		for (int i = 1; i < nums.length; i++) {
			for (int j = 1; j <= target; j++) {
				if (nums[i] <= j) {
					int currTarget = j;
					int currEle = nums[i];
					boolean include = dp[i - 1][currTarget - currEle];
					boolean exclude = dp[i - 1][j];
					dp[i][j] = include || exclude;
				} else {
					boolean exclude = dp[i - 1][j];
					dp[i][j] = exclude;
				}
			}
		}

		return dp;
	}

	// Minimum Subset Sum Difference
	public static int minSubsetSumDifference(int[] nums) {
		int totalSum = 0;
		for (int num : nums) {
			totalSum += num;
		}

		int maxSubsetSum = (totalSum + 1) / 2;

		// Generate dp array using subSetSumTabulation
		boolean[][] dp = subSetSumTabulation(nums, maxSubsetSum);

		// Find the maximum subset sum less than or equal to totalSum / 2
		int minSubsetSum = 0;
		for (int j = maxSubsetSum; j >= 0; j--) {
			if (dp[nums.length - 1][j]) {
				minSubsetSum = j;
				break;
			}
		}

		int minDifference = totalSum - 2 * minSubsetSum;

		return minDifference;
	}
	
	

	public static void main(String[] args) {
		int[] nums = { 2, -1, 0, 4, -2, -9 };

		// Using the minSubsetSumDifference function
		int result = minSubsetSumDifference(nums);
		System.out.println("Minimum Subset Sum Difference: " + result);

		// Using the subSetSumTabulation function separately
		int target = 8;
		boolean[][] dp = subSetSumTabulation(nums, target);
		// You can use the dp array for further analysis if needed
		System.out.println("Is subset sum of " + target + " possible? " + dp[nums.length - 1][target]);
	}
}
