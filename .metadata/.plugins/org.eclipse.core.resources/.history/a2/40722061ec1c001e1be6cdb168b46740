package packagee13__BinaryTrees;

import java.util.LinkedList;
import java.util.Queue;

public class BT1 {
	
	static class Node {
		int data;
		Node left;
		Node right;
		
		public Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	
	static class BinaryTree {
		
		static int idx = -1;
		
		public static Node buildTree(int[] arr) {
			idx++;
			if( idx >= arr.length || arr[idx] == -1) {
				return null;
			}
			
			Node newNode = new Node(arr[idx]);
			newNode.left = buildTree(arr);
			newNode.right = buildTree(arr);
			
			return newNode;
		}
		
		public static void preOrderTraversal(Node root) {
			
			if(root == null) {
				return;
			}
			
			System.out.print(root.data+" ");
			
			preOrderTraversal(root.left);
			preOrderTraversal(root.right);
			
		}
		
		public static void inOrderTraversal(Node root) {
			if(root == null) {
				return;
			}
			inOrderTraversal(root.left);
			System.out.print(root.data+" ");
			inOrderTraversal(root.right);
		}
		
		public static void postOrderTraversal(Node root) {
			if(root == null) {
				return ;
			}
			
			postOrderTraversal(root.left);
			postOrderTraversal(root.right);
			System.out.print(root.data+" ");
		}
		
		public static void levelOrderTraversal(Node root) {
			if(root == null) {
				return;
			}
			
			Queue<Node> q = new LinkedList<>();
			q.add(root);
			q.add(null);
			
			while(!q.isEmpty()) {
				Node currNode = q.remove();
				if(currNode == null) {
					System.out.println();
					if(!q.isEmpty()) {
						q.add(null);
					}else {
						break;
					}
				}else {
					System.out.print(currNode.data + " ");
					if (currNode.left != null) {
					    q.add(currNode.left);
					}
					if (currNode.right != null) {
					    q.add(currNode.right);
					}


				}
			}
		}
		
		public static int heightOfTree(Node root) {
			if(root == null) {
				return 0;
			}
			
			int lh = heightOfTree(root.left);
			int rh = heightOfTree(root.right);
			
			return Math.max(lh, rh)+1;
			
		}
		
		public static int countNodes(Node root) {
			if(root == null) {
				return 0;
			}
			
			int leftCount = countNodes(root.left);
			int rightCount = countNodes(root.right);
			
			return leftCount+rightCount+1;
		}
		
		public static int sumOfNodes(Node root) {
			if(root == null) {
				return 0;
			}
			
			int leftSum = sumOfNodes(root.left);
			int rightSum = sumOfNodes(root.right);
			
			return leftSum + rightSum + root.data
		}
	}
	

	public static void main(String[] args) {
		
		int[] arr = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6};
		
		BinaryTree tree = new BinaryTree();
		Node root = tree.buildTree(arr);
		System.out.println("root node's value is : "+root.data);
		
		System.out.println("preOrder traversal result is :- ");
		tree.preOrderTraversal(root);
		System.out.println();
		System.out.println("inOrder traversal result is :- ");
		tree.inOrderTraversal(root);
		System.out.println();
		System.out.println("postOrder traversal result is :- ");
		tree.postOrderTraversal(root);
		System.out.println();
		System.out.println("levelOrder traversal result is :- ");
		tree.levelOrderTraversal(root);
		System.out.println("height of the tree is : ");
		System.out.println(tree.heightOfTree(root));
		System.out.println("Count of nodes in the tree is : ");
		System.out.println(tree.countNodes(root));
		
	}

}
