package packagee19_dynamic_programming;

public class P4_0_1_knapsack {
	
	public static int knapsack(int[] val, int[] wt, int W, int i) {
		// when there is nothing to add, or there is no weight then result is 0
		if(i==0 || W == 0) {
			return 0;
		}
		
		if(wt[i] <= W) {
			int addChoice = val[i] + knapsack(val, wt, W-wt[i], i-1);
			int noAddChoice = knapsack(val, wt, W, i-1);
			return Math.max(addChoice, noAddChoice);
		}else {
			int cantAdd = knapsack(val, wt, W, i-1);
			return cantAdd;
		}
	}
	

	public static void main(String[] args) {
		
		int val[] = new int[] { 60, 100, 120 };
        int wt[] = new int[] { 10, 20, 30 };
        int W = 50;
        int n = val.length;
        System.out.println(knapsack(val, wt, W, n-1));
		

	}

}
