package Type2_0_1_KnapSack;

import java.util.Arrays;

/*
 * divide the given array in two parts in any order : in such a way that, the difference between 
 * both their sum should be minimum
 */

public class P4_Minimum_SubSet_Sum_Difference { // don't waste time 2 days busted

	// Also known as Minimum Partition

	public static int minimumPartition(int[] arr) {
		
		int sum = Arrays.stream(arr).sum();
		
		int target = sum/2;
		
		boolean possible = subSetTabulation(arr, target);
		
		if(possible) {
			
		}
		
	}
	
	// Tabulation
	public static boolean subSetTabulation(int[] arr, int target) {

		boolean[][] dp = new boolean[arr.length + 1][target + 1];
		for (int i = 0; i < dp.length; i++) {
			dp[i][0] = true;
		}

		for (int i = 1; i < dp.length; i++) {
			for (int j = 1; j < dp[i].length; j++) {
				// include
				if (arr[i - 1] <= j) {
					boolean include = dp[i - 1][j - arr[i - 1]];
					boolean exlude = dp[i - 1][j];
					dp[i][j] = include || exlude;
				} else {
					boolean exlude = dp[i - 1][j];
					dp[i][j] = exlude;
				}
			}
		}

		return dp[arr.length][target];
	}

	public static void main(String[] args) {

		int arr[] = { 3, 1 };

		System.out.println(minnimumPartition(arr));

	}

}
